{"version":3,"sources":["about/index.js","home/index.js","projects/wildlands/model/schema.js","projects/wildlands/model/Part.js","projects/wildlands/model/SetMembership.js","projects/wildlands/model/Set.js","projects/wildlands/model/List.js","projects/wildlands/model/ListItem.js","projects/wildlands/model/SetImage.js","projects/wildlands/model/index.js","projects/wildlands/index.js","projects/index.js","routes/listItemLink.js","routes/index.js","app/index.js","serviceWorker.js","index.js"],"names":["About","Home","dfSchema","appSchema","version","tables","tableSchema","name","columns","type","isIndexed","isOptional","Part","field","children","Model","table","associations","set_memberships","foreignKey","SetMembership","relation","parts","key","sets","Set","set_images","List","this","update","list","set","quantity","isPainted","collections","get","create","listItem","items","destroyAllPermanently","list_items","action","ListItem","lists","SetImage","adapter","LokiJSAdapter","dbName","schema","useWebWorker","useIncrementalIndexedDB","wildLandsDatabase","Database","modelClasses","actionsEnabled","Wildlands","database","projectList","subPage","component","Projects","match","useRouteMatch","map","project","index","path","ListItemLink","props","icon","primary","to","open","other","renderLink","React","useMemo","forwardRef","itemProps","ref","button","ListItemIcon","ListItemText","useStyles","makeStyles","theme","root","display","appBar","transition","transitions","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","nestedList","paddingLeft","Routes","classes","useTheme","useState","menuOpen","setMenuOpen","projectsOpen","setProjectsOpen","className","AppBar","position","clsx","Toolbar","IconButton","color","aria-label","onClick","edge","Typography","variant","noWrap","Drawer","anchor","paper","direction","Divider","prevOpen","Collapse","in","timeout","unmountOnExit","disablePadding","ButtonGroup","fullWidth","Button","href","App","prefersDarkMode","useMediaQuery","createMuiTheme","palette","ThemeProvider","CssBaseline","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.db64a3e1.chunk.js","sourcesContent":["import React from 'react'\n\nfunction About() {\n  return <div> test about </div>\n}\n\nexport default About\n","import React from 'react'\n\nfunction Home() {\n  return <div> test home </div>\n}\n\nexport default Home\n","import { appSchema, tableSchema } from '@nozbe/watermelondb'\n\nexport const dfSchema = appSchema({\n  version: 1,\n  tables: [\n    tableSchema({\n      name: 'parts',\n      columns: [\n        { name: 'name', type: 'string' },\n        { name: 'sku', type: 'string', isIndexed: true },\n      ],\n    }),\n    tableSchema({\n      name: 'set_memberships',\n      columns: [\n        { name: 'part_id', type: 'string', isIndexed: true },\n        { name: 'set_id', type: 'string', isIndexed: true },\n        { name: 'part_quantity', type: 'number' },\n      ],\n    }),\n    tableSchema({\n      name: 'sets',\n      columns: [\n        { name: 'sku', type: 'string', isIndexed: true },\n        { name: 'classification', type: 'string' },\n        { name: 'biome', type: 'string' },\n        { name: 'cost', type: 'number' },\n        { name: 'painted_cost', type: 'number', isOptional: true },\n      ],\n    }),\n    tableSchema({\n      name: 'set_images',\n      columns: [\n        { name: 'number', type: 'string' },\n        { name: 'set_id', type: 'string', isIndexed: true },\n      ],\n    }),\n    tableSchema({\n      name: 'lists',\n      columns: [{ name: 'name', type: 'string' }],\n    }),\n    tableSchema({\n      name: 'list_items',\n      columns: [\n        { name: 'list_id', type: 'string', isIndexed: true },\n        { name: 'set_id', type: 'string', isIndexed: true },\n        { name: 'quantity', type: 'number' },\n        { name: 'is_painted', type: 'boolean', isOptional: true },\n      ],\n    }),\n  ],\n})\n","import { Model } from '@nozbe/watermelondb'\nimport { field, children } from '@nozbe/watermelondb/decorators'\n\nexport default class Part extends Model {\n  static table = 'parts'\n  static associations = {\n    set_memberships: { type: 'has_many', foreignKey: 'part_id' },\n  }\n\n  @field('name') name\n  @field('sku') sku\n  @children('set_memberships') setMemberships\n}\n","import { Model } from '@nozbe/watermelondb'\nimport { field, relation } from '@nozbe/watermelondb/decorators'\n\nexport default class SetMembership extends Model {\n  static table = 'set_memberships'\n  static associations = {\n    parts: { type: 'belongs_to', key: 'part_id' },\n    sets: { type: 'belongs_to', key: 'set_id' },\n  }\n\n  @field('part_quantity') partQuantity\n  @relation('parts', 'part_id') part\n  @relation('sets', 'set_id') set;\n}\n","import { Model } from '@nozbe/watermelondb'\nimport { field, children } from '@nozbe/watermelondb/decorators'\n\nexport default class Set extends Model {\n  static table = 'sets'\n  static associations = {\n    set_memberships: { type: 'has_many', foreignKey: 'set_id' },\n    set_images: { type: 'has_many', foreignKey: 'set_id' },\n  }\n  @field('sku') sku\n  @field('classification') classification\n  @field('biome') biome\n  @field('cost') cost\n  @field('painted_cost') paintedCost\n\n  @children('set_memberships') setMemberships\n  @children('set_images') setImages\n}\n","import { Model } from '@nozbe/watermelondb'\nimport { field, children, action } from '@nozbe/watermelondb/decorators'\n\nexport default class List extends Model {\n  static table = 'lists'\n  static associations = {\n    list_items: { type: 'has_many', foreignKey: 'list_id' },\n  }\n\n  @field('name') name\n  @children('list_items') items\n\n  @action async setName(name) {\n    await this.update((list) => {\n      list.name = name\n    })\n  }\n\n  @action async addItem(set, quantity, isPainted) {\n    return await this.collections.get('list_items').create((listItem) => {\n      listItem.list.set(this)\n      listItem.set.set(set)\n      listItem.quantity = quantity\n      listItem.isPainted = isPainted\n    })\n  }\n\n  async markAsDeleted() {\n    await this.items.destroyAllPermanently()\n    await super.markAsDeleted()\n  }\n}\n","import { Model } from '@nozbe/watermelondb'\nimport { field, relation, action } from '@nozbe/watermelondb/decorators'\n\nexport default class ListItem extends Model {\n  static table = 'list_items'\n  static associations = {\n    lists: { type: 'belongs_to', key: 'list_id' },\n  }\n\n  @field('quantity')\n  quantity\n  @field('is_painted')\n  isPainted\n  @relation('lists', 'list_id')\n  list\n  @relation('sets', 'set_id')\n  set;\n\n  @action async setQuantity(quantity) {\n    await this.update((listItem) => {\n      listItem.quantity = quantity\n    })\n  }\n\n  @action async setIsPainted(isPainted) {\n    await this.update((listItem) => {\n      listItem.isPainted = isPainted\n    })\n  }\n}\n","import { Model } from '@nozbe/watermelondb'\nimport { field, relation } from '@nozbe/watermelondb/decorators'\n\nexport default class SetImage extends Model {\n  static table = 'set_images'\n  static associations = {\n    sets: { type: 'belongs_to', key: 'set_id' },\n  }\n  @field('number') number\n  @relation('sets', 'set_id') set;\n}\n","import { dfSchema } from './schema'\nimport Part from './Part'\nimport SetMembership from './SetMembership'\nimport Set from './Set'\nimport List from './List'\nimport ListItem from './ListItem'\nimport SetImage from './SetImage'\nimport LokiJSAdapter from '@nozbe/watermelondb/adapters/lokijs'\nimport { Database } from '@nozbe/watermelondb'\n\nconst adapter = new LokiJSAdapter({\n  dbName: 'WildlandsKickstarterDb',\n  schema: dfSchema,\n  useWebWorker: false,\n  useIncrementalIndexedDB: true,\n})\n\nexport const wildLandsDatabase = new Database({\n  adapter,\n  modelClasses: [Part, SetMembership, Set, SetImage, List, ListItem],\n  actionsEnabled: true,\n})\n","import React from 'react'\nimport DatabaseProvider from '@nozbe/watermelondb/DatabaseProvider'\nimport { wildLandsDatabase } from './model'\n\nfunction Wildlands() {\n  return (\n    <DatabaseProvider database={wildLandsDatabase}>\n      <div> test wildlands </div>\n    </DatabaseProvider>\n  )\n}\n\nexport default Wildlands\n","import React from 'react'\nimport Wildlands from './wildlands'\nimport { Switch, Route, useRouteMatch } from 'react-router-dom'\n\nconst projectList = [\n  {\n    subPage: 'wildlands',\n    name: 'Wildlands',\n    component: <Wildlands />,\n  },\n]\n\nfunction Projects() {\n  let match = useRouteMatch()\n\n  return (\n    <Switch>\n      {projectList.map((project, index) => (\n        <Route path={`${match.path}/${project.subPage}`}>\n          {project.component}\n        </Route>\n      ))}\n      <Route path={match.path}>Select a project</Route>\n    </Switch>\n  )\n}\n\nexport default Projects\n\nexport { Projects, projectList }\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link as RouterLink } from 'react-router-dom'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ExpandLess from '@material-ui/icons/ExpandLess'\nimport ExpandMore from '@material-ui/icons/ExpandMore'\n\nfunction ListItemLink(props) {\n  const { icon, primary, to, open, ...other } = props\n\n  const renderLink = React.useMemo(\n    () =>\n      React.forwardRef((itemProps, ref) => (\n        <RouterLink to={to} ref={ref} {...itemProps} />\n      )),\n    [to],\n  )\n\n  return (\n    <li>\n      <ListItem button component={renderLink} {...other}>\n        {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\n        <ListItemText primary={primary} />\n        {open != null ? open ? <ExpandLess /> : <ExpandMore /> : null}\n      </ListItem>\n    </li>\n  )\n}\n\nListItemLink.propTypes = {\n  icon: PropTypes.element,\n  open: PropTypes.bool,\n  primary: PropTypes.string.isRequired,\n  to: PropTypes.string.isRequired,\n}\n\nexport default ListItemLink\n","import React from 'react'\nimport clsx from 'clsx'\nimport About from '../about'\nimport Home from '../home'\nimport { Projects, projectList } from '../projects'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport Drawer from '@material-ui/core/Drawer'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport List from '@material-ui/core/List'\nimport Typography from '@material-ui/core/Typography'\nimport Divider from '@material-ui/core/Divider'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\nimport ListItemLink from './listItemLink'\nimport Collapse from '@material-ui/core/Collapse'\nimport InstagramIcon from '@material-ui/icons/Instagram'\nimport LinkedInIcon from '@material-ui/icons/LinkedIn'\nimport TwitterIcon from '@material-ui/icons/Twitter'\nimport GitHubIcon from '@material-ui/icons/GitHub'\nimport HomeIcon from '@material-ui/icons/Home'\nimport InfoIcon from '@material-ui/icons/Info'\nimport AccountTreeIcon from '@material-ui/icons/AccountTree'\nimport Button from '@material-ui/core/Button'\nimport IconButton from '@material-ui/core/IconButton'\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\n\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nconst drawerWidth = 240\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n  nestedList: {\n    paddingLeft: theme.spacing(6),\n  },\n}))\n\nfunction Routes() {\n  const classes = useStyles()\n  const theme = useTheme()\n  const [menuOpen, setMenuOpen] = React.useState(true)\n  const [projectsOpen, setProjectsOpen] = React.useState(false)\n\n  const handleProjectsClick = () => {\n    setProjectsOpen((prevOpen) => !prevOpen)\n  }\n  const handleDrawerOpen = () => {\n    setMenuOpen(true)\n  }\n  const handleDrawerClose = () => {\n    setMenuOpen(false)\n  }\n\n  return (\n    <Router>\n      <div className={classes.root}>\n        <AppBar\n          position=\"fixed\"\n          className={clsx(classes.appBar, { [classes.appBarShift]: menuOpen })}>\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerOpen}\n              edge=\"start\"\n              className={clsx(classes.menuButton, menuOpen && classes.hide)}>\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" noWrap>\n              toppulous\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          className={classes.drawer}\n          variant=\"persistent\"\n          anchor=\"left\"\n          open={menuOpen}\n          classes={{ paper: classes.drawerPaper }}>\n          <div className={classes.drawerHeader}>\n            <IconButton onClick={handleDrawerClose}>\n              {theme.direction === 'ltr' ? (\n                <ChevronLeftIcon />\n              ) : (\n                <ChevronRightIcon />\n              )}\n            </IconButton>\n          </div>\n          <Divider />\n          <List>\n            <ListItemLink to=\"/\" primary=\"Home\" icon={<HomeIcon />} />\n            <ListItemLink to=\"/about\" primary=\"About\" icon={<InfoIcon />} />\n            <ListItemLink\n              to=\"/projects\"\n              primary=\"Projects\"\n              icon={<AccountTreeIcon />}\n              open={projectsOpen}\n              onClick={handleProjectsClick}\n            />\n            <Collapse\n              component=\"li\"\n              in={projectsOpen}\n              timeout=\"auto\"\n              unmountOnExit>\n              <List disablePadding>\n                {projectList.map((project, index) => (\n                  <ListItemLink\n                    to={`/projects/${project.subPage}`}\n                    primary={project.name}\n                    className={classes.nestedList}\n                  />\n                ))}\n              </List>\n            </Collapse>\n          </List>\n          <Divider />\n          <ButtonGroup variant=\"text\" fullWidth={true}>\n            <Button aria-label=\"GitHub\" href=\"https://github.com/toppulous\">\n              <GitHubIcon />\n            </Button>\n            <Button\n              aria-label=\"Linkedin\"\n              href=\"https://www.linkedin.com/in/toppulous/\">\n              <LinkedInIcon />\n            </Button>\n            <Button\n              aria-label=\"Instagram\"\n              href=\"https://www.instagram.com/toppulous/\">\n              <InstagramIcon />\n            </Button>\n            <Button aria-label=\"Twitter\" href=\"https://twitter.com/toppulous\">\n              <TwitterIcon />\n            </Button>\n          </ButtonGroup>\n        </Drawer>\n        <main\n          className={clsx(classes.content, {\n            [classes.contentShift]: menuOpen,\n          })}>\n          <div className={classes.drawerHeader} />\n          <Switch>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/projects\">\n              <Projects />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </main>\n      </div>\n    </Router>\n  )\n}\n\nexport default Routes\n\nexport { Routes }\n","import React from 'react'\nimport Routes from '../routes'\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline'\n\nfunction App() {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)')\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode],\n  )\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Routes />\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}