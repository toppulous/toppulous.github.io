{"version":3,"sources":["About.tsx","Projects.tsx","Home.tsx","App.tsx","serviceWorker.ts","theme.tsx","index.tsx"],"names":["About","React","Component","ProjectOne","Typography","variant","Projects","match","useRouteMatch","Paper","List","ListItem","component","innerRef","props","to","url","ListItemText","path","Home","App","elevation","Boolean","window","location","hostname","theme","createMuiTheme","palette","type","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2OAQeA,E,uKAJX,OAAQ,0D,GAFQC,IAAMC,W,uDC6B1B,SAASC,IACP,OAAO,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,yBAGMC,MA9Bf,WACE,IAAMC,EAAQC,cACd,OACE,kBAACC,EAAA,EAAD,KACE,kBAACL,EAAA,EAAD,CAAYC,QAAQ,MAApB,YAGA,kBAACK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAUC,UAAW,cAAEC,SAAF,IAAeC,EAAf,mCAA0B,kBAAC,IAAD,iBAAgBA,EAAhB,CAAuBC,GAAE,UAAKR,EAAMS,IAAX,mBACtE,kBAACC,EAAA,EAAD,sBAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAI,UAAKX,EAAMW,KAAX,eACT,kBAACf,EAAD,QAGJ,kBAAC,IAAD,CAAOe,KAAMX,EAAMW,MACjB,kBAACd,EAAA,EAAD,CAAYC,QAAQ,MAApB,uBCfOc,E,uKAJX,OAAQ,yD,GAFOlB,IAAMC,WCqCVkB,MA/Bf,WACE,OACE,kBAAC,IAAD,KACE,kBAACX,EAAA,EAAD,CAAOY,UAAW,GAChB,kBAACX,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAUC,UAAW,cAAEC,SAAF,IAAeC,EAAf,mCAA0B,kBAAC,IAAD,iBAAgBA,EAAhB,CAAuBC,GAAG,SACvE,kBAACE,EAAA,EAAD,gBAEF,kBAACN,EAAA,EAAD,CAAUC,UAAW,cAAEC,SAAF,IAAeC,EAAf,mCAA0B,kBAAC,IAAD,iBAAgBA,EAAhB,CAAuBC,GAAG,cACvE,kBAACE,EAAA,EAAD,iBAEF,kBAACN,EAAA,EAAD,CAAUC,UAAW,cAAEC,SAAF,IAAeC,EAAf,mCAA0B,kBAAC,IAAD,iBAAgBA,EAAhB,CAAuBC,GAAG,iBACvE,kBAACE,EAAA,EAAD,qBAIN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UCpBUI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlB,MACvB,2D,4BCVSmB,EANDC,YAAe,CAC3BC,QAAS,CACPC,KAAM,UCIVC,IAASC,OACP,kBAACC,EAAA,EAAD,CAAeN,MAAOA,GACpB,kBAACO,EAAA,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SF8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0de74ccc.chunk.js","sourcesContent":["import React from 'react';\n\nclass About extends React.Component {\n  render() {\n    return (<h1>This is the about page</h1>);\n  }\n}\n\nexport default About;\n","import React from 'react';\nimport { Link as RouterLink , Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { Typography, List, Paper, ListItem, ListItemText } from '@material-ui/core';\n\n\nfunction Projects() {\n  const match = useRouteMatch();\n  return (\n    <Paper>\n      <Typography variant=\"h1\">\n        Projects\n      </Typography>\n      <List>\n        <ListItem component={({innerRef, ...props}) => <RouterLink {...props} to={`${match.url}/project-1`} />}>\n          <ListItemText> Project 1 </ListItemText>\n        </ListItem>\n      </List>\n      <Switch>\n        <Route path={`${match.path}/project-1`}>\n          <ProjectOne />\n        </Route>\n      </Switch>\n      <Route path={match.path}>\n        <Typography variant=\"h1\">\n          Select a project\n        </Typography>\n      </Route>\n    </Paper>\n  );\n}\n\nfunction ProjectOne() {\n  return <Typography variant=\"h1\"> This is project one </Typography>;\n}\n\nexport default Projects;\n","import React from 'react';\n\nclass Home extends React.Component {\n  render() {\n    return (<h1>This is the home page</h1>);\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport About from './About';\nimport Projects from './Projects';\nimport Home from './Home';\nimport { BrowserRouter as Router, Switch, Route, Link as RouterLink} from 'react-router-dom';\nimport { Paper, List, ListItemText, ListItem } from '@material-ui/core';\n\n// https://github.com/mui-org/material-ui/issues/9106\nfunction App() {\n  return (\n    <Router>\n      <Paper elevation={0}>\n        <List>\n          <ListItem component={({innerRef, ...props}) => <RouterLink {...props} to=\"/\"/>}>\n            <ListItemText> Home </ListItemText>\n          </ListItem>\n          <ListItem component={({innerRef, ...props}) => <RouterLink {...props} to=\"/about\"/>}>\n            <ListItemText> About </ListItemText>\n          </ListItem>\n          <ListItem component={({innerRef, ...props}) => <RouterLink {...props} to=\"/projects\"/>}>\n            <ListItemText> Proects </ListItemText>\n          </ListItem>\n        </List>\n      </Paper>\n      <Switch>\n        <Route path=\"/about\">\n          <About />\n        </Route>\n        <Route path=\"/projects\">\n          <Projects />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  }\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline/>\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}