{"version":3,"sources":["about/index.js","home/index.js","projects/index.js","routes/listItemLink.js","routes/index.js","app/index.js","serviceWorker.js","index.js"],"names":["About","Home","Projects","ListItemLink","props","icon","primary","to","open","other","renderLink","React","useMemo","forwardRef","itemProps","ref","ListItem","button","component","ListItemIcon","ListItemText","useStyles","makeStyles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","nestedList","paddingLeft","Routes","classes","useTheme","useState","menuOpen","setMenuOpen","projectsOpen","setProjectsOpen","className","AppBar","position","clsx","Toolbar","IconButton","color","aria-label","onClick","edge","Typography","variant","noWrap","Drawer","anchor","paper","direction","Divider","List","prevOpen","Collapse","in","timeout","unmountOnExit","disablePadding","ButtonGroup","fullWidth","Button","href","path","App","prefersDarkMode","useMediaQuery","createMuiTheme","palette","type","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8b2c7570.chunk.js","sourcesContent":["import React from 'react';\n\nfunction About() {\n  return (\n    <div> test about </div>\n  )\n}\n\nexport default About;\n","import React from 'react';\n\nfunction Home() {\n  return (\n    <div> test home </div>\n  )\n}\n\nexport default Home;\n","import React from 'react';\n\nfunction Projects() {\n  return (\n    <div> sample projects </div>\n  );\n}\n\nexport default Projects;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link as RouterLink } from 'react-router-dom';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\n\nfunction ListItemLink(props) {\n  const { icon, primary, to, open, ...other } = props;\n\n  const renderLink = React.useMemo(\n    () => React.forwardRef((itemProps, ref) => <RouterLink to={to} ref={ref} {...itemProps} />),\n    [to],\n  );\n\n  return (\n    <li>\n      <ListItem button component={renderLink} {...other}>\n        {icon ? <ListItemIcon>{icon}</ListItemIcon>: null}\n        <ListItemText primary={primary} />\n        {open != null ? open ? <ExpandLess /> : <ExpandMore /> : null}\n      </ListItem>\n    </li>\n  );\n}\n\nListItemLink.propTypes = {\n  icon: PropTypes.element,\n  open: PropTypes.bool,\n  primary: PropTypes.string.isRequired,\n  to: PropTypes.string.isRequired,\n};\n\nexport default ListItemLink;\n","import React from 'react';\nimport clsx from 'clsx';\nimport About from '../about';\nimport Home from '../home';\nimport Projects from '../projects';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItemLink from './listItemLink';\nimport Collapse from '@material-ui/core/Collapse';\nimport InstagramIcon from '@material-ui/icons/Instagram';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport HomeIcon from '@material-ui/icons/Home';\nimport InfoIcon from '@material-ui/icons/Info';\nimport AccountTreeIcon from '@material-ui/icons/AccountTree';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n  nestedList: {\n    paddingLeft: theme.spacing(6),\n  },\n}));\n\nfunction Routes() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [menuOpen, setMenuOpen] = React.useState(true);\n  const [projectsOpen, setProjectsOpen] = React.useState(false);\n\n  const handleProjectsClick = () => {\n    setProjectsOpen((prevOpen) => !prevOpen);\n  };\n  const handleDrawerOpen = () => {\n    setMenuOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setMenuOpen(false);\n  };\n\n  return (\n    <Router>\n      <div className={classes.root}>\n        <AppBar position=\"fixed\" className={clsx(classes.appBar, { [classes.appBarShift]: menuOpen,})}>\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerOpen}\n              edge=\"start\"\n              className={clsx(classes.menuButton, menuOpen && classes.hide)}>\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" noWrap>\n              toppulous\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          className={classes.drawer}\n          variant=\"persistent\"\n          anchor=\"left\"\n          open={menuOpen}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n        >\n          <div className={classes.drawerHeader}>\n            <IconButton onClick={handleDrawerClose}>\n              {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n            </IconButton>\n          </div>\n          <Divider />\n          <List>\n            <ListItemLink to=\"/\" primary=\"Home\" icon={<HomeIcon/>} />\n            <ListItemLink to=\"/about\" primary=\"About\" icon={<InfoIcon/>} />\n            <ListItemLink to=\"/projects\" primary=\"Projects\"\n                          icon={<AccountTreeIcon/>}\n                          open={projectsOpen}\n                          onClick={handleProjectsClick}/>\n            <Collapse component=\"li\" in={projectsOpen} timeout=\"auto\" unmountOnExit>\n              <List disablePadding>\n                <ListItemLink to=\"/projects/project1\"\n                              primary=\"project1\"\n                              className={classes.nestedList} />\n              </List>\n            </Collapse>\n          </List>\n          <Divider/>\n          <ButtonGroup variant=\"text\" fullWidth={true}>\n          <Button aria-label=\"GitHub\" href=\"https://github.com/toppulous\">\n            <GitHubIcon />\n          </Button>\n          <Button aria-label=\"Linkedin\" href=\"https://www.linkedin.com/in/toppulous/\">\n            <LinkedInIcon />\n          </Button>\n          <Button aria-label=\"Instagram\" href=\"https://www.instagram.com/toppulous/\">\n            <InstagramIcon/>\n          </Button>\n          <Button aria-label=\"Twitter\" href=\"https://twitter.com/toppulous\">\n            <TwitterIcon />\n          </Button>\n          </ButtonGroup>\n        </Drawer>\n        <main\n          className={clsx(classes.content, {\n            [classes.contentShift]: menuOpen,\n          })}\n        >\n          <div className={classes.drawerHeader} />\n          <Switch>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/projects\">\n              <Projects />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </main>\n      </div>\n    </Router>\n  )\n}\n\nexport default Routes;\n\nexport { Routes };\n","import React from 'react';\nimport Routes from '../routes';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nfunction App() {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n      [prefersDarkMode],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline/>\n      <Routes/>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}